This file outlines various tasks in the project.
Lines with no indentation indicate the beginning of a topic

Features
    Add loose file capability to vpk.Context // Partially done
    Save vmf file.
        This requires first loading all fields in existing vmfs
        Then serializing any state we have built up.
        This should probably wait until after we have decided how all entities are stored.
        Check if real Hammer will read vmf's with unix line endings

        Okay, we will use our json format to store serialized maps.
            Write a map.json -> vmf converter (harder)
            Write a map.json -> obj converter (easy)

        Support loading arbitrary kvs from vmf. 
        create a vdf_map component and associate it with entities.


    Multi select, multi op

    Displacements
        DONE Loading
        Editing

    DONE Undo/Redo stack
    

Interface # All the features for editing
    Allow tools to declare bindings,
        only send state (mouse clicks, bindings) to focused tool and window
        when clicking in inspector, these can't be send to 3d view

    Tool based (enum)?
    2d editing?

    Rotation gizmo
    clipping tool
    Scale gizmo
    Texture application
    Vertex tool
    EXTRUDE Tool, create a new solid at face
    Texture manipulation

    DONE Face translation
    DONE Model placement

    MULTI SELECT

    How to manage all the different window panes?
        filebrowser
        inspector
        texture browser
        material browser
        save dialog?
        primitive creator
        keybinding cheatsheet
        main 3d view
        
        What if it was entirely user defined? 
            It could be specified via config.vdf.
            Splits would be specified. 3d views can capture mice
        Interface for user to create splits and assign panes to each section

    Visgroups
    Grouping of solids, 
        a bigger part of this is entities owning a set of solids. displacments and func_detail
    Generating primitives:
        cube
        sphere
        arch
        cylinder
        cone
        stairs
        
        Solids are specified by a set of vertices and sides whose polygon windings index into those vertices.
        Arch shouldn't be too hard, with polar coordinates, each wedge solid is just a 6 sided solid d_theta wide and d_r thick

FeatureCreep
    DONE Drawing the 3d skybox
    Model Animation
    Lighting
    Network transparent editing. Coop editing over tcp
    Precedural model placement (draw a (pipe, fence, cable) path, gets filled with models)
    Actual csg?

Optimization
    Lowering frame rates when possible:
        By default the app updates at whatever frequency vsync sets.
        This is an issue with movements (camera) (use a dt).
        If no state has changed why redraw.
        win.pumpEvents can be set to .wait which would only forcibly update every second.
        We could also check window focus and just wait so the app doesn't burn cpu when unfocused.
        (.wait) has issues currently. When moving the camera pos, a keydown event is sent, we then need to switch to .poll until all move keys are released.

        Excessive optimization:
            Determine which events require redraw.
            For example, a mouse move event only requires immediate redraw if in a 3d view with cursor captured and some object being manipulated
            If the gui becomes expensive, manually determine what state the inspector depends on, then cache the gui's RenderTexture.

Dependencies:
    Using a gui toolkit, qt, gtk, tk?
        This is only worth doing if it improves the cpu usage of the app.
        Support for rendering complex text layouts such as RTL or vertical is very low priority.
        Valve games use exclusively Ascii for asset naming.
        Determine the cost of our Imgui
        Having sdl and libepoxy as our only dependencies makes building easy.

    GUI
        I hate gui
        If you use fixed width fonts the math gets really easy
        Idea for gui is this.
        Its a tui, tui's are ugly.
        The issue with the current gui is that it isnt scaleable

        Requirements:
            Render fast
            looks good enough.
            allow all text to be read
            could just be a widget


Utility
    Switch to the new ecs, vtable for each component
        deinit
        dupe

    DONE Configuring keybindings, 
    Export to obj
    Executing a build script for map compilation
    A lua api?

    DONE Auto saves

Game support
    Portal 2's gameinfo txt doesn't specify vpk's
    Portal 2's fgd crashes parser, same with cstrike.fgd
    Gmod.
    Write a game config for every offical source game on steam.

Build
    Windows
        How the heck do people build software on Windows?
        Currently we use msys. See if distribution of dlls is allowed
        How to programmatically copy all required dlls to project
        How to set a custom directory for dll search like LD_LIBRARY_PATH
    Linux
        Do linker paths need to be configurable for build scripts (aur).
        author a linux .desktop file.
        look into appimage building
        Generate completion scripts for zsh and maybe other shells.
