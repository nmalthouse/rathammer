// Change to false to disable http version checking. If unspecified, defaults to true 
enable_version_check    true

// Define all keybinds
keys {
    // keyboard names can optionally be prefixed with "scancode:" or "keycode:" otherwise the key name is bound as a keycode

    // Scancodes map to physical keys on the keyboard. 'w' is always the same physical key regardless of layout.
    //Key names only need to be in "" if they contain {} or whitespace
    cam_forward     scancode:W 
    cam_strafe_l    scancode:A
    cam_back        scancode:S
    cam_strafe_r    scancode:D
    cam_up          scancode:space
    cam_down        scancode:c

    select          scancode:E
    clear_selection ctrl+scancode:E
    delete_selected ctrl+scancode:D

    grid_inc        scancode:R
    grid_dec        scancode:F
    undo            ctrl+scancode:z
    redo            ctrl+shift+scancode:z

    cam_slow        scancode:left_ctrl //This must be left_ctrl, not ctrl as 'ctrl' is not a physical key, only a modifier
                                       //Bindings must include at least one key.

    duplicate       scancode:z

    quit            ctrl+escape
    pause           escape
    focus_search    "ctrl+keycode:f"

    down_line       ctrl+scancode:c
    up_line         ctrl+scancode:v
    grab_far        scancode:q


    workspace      alt+1 // Main 3d
    workspace      alt+scancode:t //texture browser
    workspace      alt+scancode:m //Model browser
    workspace      alt+2 // Main 2d
    workspace      alt+3
    workspace      alt+4

    //TODO, specify tool names,
    //Currently this maps to tools in the order they are registered in editor.zig.Context.postInit
    tool           1
    tool           2
    tool           shift+scancode:G //place ent
    tool           shift+scancode:B //cube draw
    tool           3
    tool           shift+scancode:T //texture
    tool           shift+scancode:V //vertex
    tool           shift+scancode:X //clip


    cube_draw_plane_up      scancode:x
    cube_draw_plane_down    scancode:z

    inspector_tab F1 //Order maps to tab order, currently "props, io, tool, layer"
    inspector_tab F2
    inspector_tab F3
    inspector_tab F4

    mouse_capture   scancode:left_shift

    build_map       scancode:F9
    build_map_user  scancode:F10
}
// Determines how the mouse cursor is captured in 3d view. key is keys.mouse_capture
// valid values are: key_low, key_high, toggle
mouse_grab_when     key_low

dot_size 16

// Tint the gui. Less useful once we have a dark mode. rgba value. 
//Hex values must be prefixed with '0x', not '#'
gui_tint 0xffff_ffff

paths {
    //Set the directory rathammer searchs for games. if unset, searches default steam directory
    //steam_dir   "/mnt/flash/SteamLibrary/steamapps/common"
}

autosave {
    interval_min    5   //Minutes between autosaves
    max             10  //How many autosaves of a given map name before pruning

                        //Autosaves are stored per the filename of the map so
                        //my_path_to_map/my_map.json
                        //other_path/my_map.json
                        //would overwrite each other's autosaves
}

window {
    width_px    800
    height_px   600
    cam_fov     85
    sensitivity_3d  1
    sensitivity_2d  1

    //The display scale is determined automatically and is used to set the scale of the gui and other elements.
    //Uncomment this line to permanently change it. value must be in (0, f32max)
    //display_scale 1
}

//The name of a game defined in "games"
default_game  basic_hl2



//All directory paths are relative to paths.steam_path or the default steam path on your platform
games {
    mycustom {

        gameinfo {
            base_dir "rat_custom"
            game_dir "rat_custom"
        }

        fgd_dir     "rat_custom"
        fgd         "base.fgd" 

        asset_browser_exclude {
            
        }
    }
    
    // Game configs can be specifed here or in a 
    // a folder called games located in the config directory
    // ls ~/.config/rathammer/
    //      config.vdf games
    // ls ~/.config/rathammer/games/
    //      tf2.vdf gmod.vdf
    basic_hl2 {
        // Each game can mount multiple game infos
        gameinfo {
            // There must be a gameinfo.txt inside of game_dir, or a 'gameinfo_name' if set
            base_dir "Half-Life 2"
            game_dir "Half-Life 2/hl2_complete"
            //gameinfo_name "rathammer_gameinfo.txt" //Specify a custom gameinfo.txt
        }

        // Used to do a fast compile when pressing F9. 
        // To do a more specific compile. Write a shell or bat script and run it.
        mapbuilder {
            game_dir    "Half-Life 2"
            exe_dir    "Half-Life 2/bin"
            game_name   "hl2_complete"
            output_dir  "hl2/maps"

            //tmp_dir   "/tmp/mapbuild" -> defaults  to /tmp/mapcompile or C:\rathammer_tmp on linux and windows

            // Uncomment the following line to run a custom build script when f10 is pressed.
            //user_build_cmd  "./myscript.sh"
            // "./myscript.sh" is the name of an executable relative to tmp_dir
            // it is NOT evaluated in any way, IE, you can not pass arguments
            //see scripts/user_script.sh for the environment vars passed in.
        }

        // A game can only specify one fgd
        // To include more, use the @include directive in your fgd
        fgd_dir     "Half-Life 2/bin"
        //Relative to fgd_dir. fgd's can include other fgd's so setting 
        //fgd_dir rather than specifying the path in "fgd" is required.
        fgd         "halflife2.fgd" 

        //List paths which will be omitted from material search
        asset_browser_exclude {
            prefix "materials/" //prepended to each entry

            
            entry "models" //This becomes "materials/models"
            entry "gamepadui"
            entry "vgui"
            entry "particle"
            entry "console"
            entry "sprites"
            entry "backpack"
        }
    }
}

